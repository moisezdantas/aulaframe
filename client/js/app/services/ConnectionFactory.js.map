{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","forEach","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAWC,MAAX,EAAsB;;AAErC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA+BD,OAA/B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAhB;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;kDAEoBrB,U,EAAW;AAC5BH,+BAAOyB,OAAP,CAAe,iBAAS;AACpB,gCAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqC3B,MAArC,CAAH,EAAgD;AAC5CG,2CAAWyB,iBAAX,CAA6BC,KAA7B;AACH;AACD1B,uCAAW2B,iBAAX,CAA6BD,KAA7B,EAAoC,EAAEE,eAAe,IAAjB,EAApC;AACH,yBALD;AAMH;;;sDAEuB;AACpB,4BAAG5B,UAAH,EAAc;AACVC;AACAD,uCAAWC,KAAX;AACAD,yCAAa,IAAb;AACH;AACJ;;;;;;;;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes']\nconst version = 4;\nconst dbName = 'aluraframe';\n\nvar connection = null;\nvar close = null;\n    \nexport class ConnectionFactory {\n    \n    constructor (){\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static getConnection(){\n\n        return new Promise((resolve , reject) => {\n            \n            let openRequest = window.indexedDB.open(dbName , version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n                if(!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function(){\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    }\n                }\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error);\n            };\n        });\n    }\n\n    static _createStores(connection){\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(stores)){\n                connection.deleteObjectStore(store);\n            }\n            connection.createObjectStore(store, { autoIncrement: true}); \n        });\n    }\n\n    static closeConnection(){\n        if(connection){\n            close();\n            connection.close();\n            connection = null;\n        }\n    }\n};"]}